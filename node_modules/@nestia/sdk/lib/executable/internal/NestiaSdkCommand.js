"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NestiaSdkCommand = void 0;
const NestiaSdkApplication_1 = require("../../NestiaSdkApplication");
const NestiaConfigLoader_1 = require("./NestiaConfigLoader");
var NestiaSdkCommand;
(function (NestiaSdkCommand) {
    NestiaSdkCommand.sdk = () => main((app) => app.sdk());
    NestiaSdkCommand.swagger = () => main((app) => app.swagger());
    NestiaSdkCommand.e2e = () => main((app) => app.e2e());
    const main = (task) => __awaiter(this, void 0, void 0, function* () {
        yield generate(task);
    });
    const generate = (task) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        // LOAD CONFIG INFO
        const compilerOptions = yield NestiaConfigLoader_1.NestiaConfigLoader.compilerOptions((_a = getFileArgument({
            type: "project",
            extension: "json",
        })) !== null && _a !== void 0 ? _a : "tsconfig.json");
        const config = yield NestiaConfigLoader_1.NestiaConfigLoader.config((_b = getFileArgument({
            type: "config",
            extension: "ts",
        })) !== null && _b !== void 0 ? _b : "nestia.config.ts", compilerOptions);
        // GENERATE
        const app = new NestiaSdkApplication_1.NestiaSdkApplication(config, compilerOptions);
        yield task(app);
    });
    const getFileArgument = (props) => {
        const argv = process.argv.slice(3);
        if (argv.length === 0)
            return null;
        const index = argv.findIndex((str) => str === `--${props.type}`);
        if (index === -1)
            return null;
        else if (argv.length === 1)
            throw new Error(`${props.type} file must be provided`);
        const file = argv[index + 1];
        if (file.endsWith(props.extension) === false)
            throw new Error(`${props.type} file must be ${props.extension} file`);
        return file;
    };
})(NestiaSdkCommand || (exports.NestiaSdkCommand = NestiaSdkCommand = {}));
//# sourceMappingURL=NestiaSdkCommand.js.map