"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedBodyProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var JsonMetadataFactory_1 = require("typia/lib/factories/JsonMetadataFactory");
var AssertProgrammer_1 = require("typia/lib/programmers/AssertProgrammer");
var IsProgrammer_1 = require("typia/lib/programmers/IsProgrammer");
var ValidateProgrammer_1 = require("typia/lib/programmers/ValidateProgrammer");
var MiscAssertCloneProgrammer_1 = require("typia/lib/programmers/misc/MiscAssertCloneProgrammer");
var MiscAssertPruneProgrammer_1 = require("typia/lib/programmers/misc/MiscAssertPruneProgrammer");
var MiscValidateCloneProgrammer_1 = require("typia/lib/programmers/misc/MiscValidateCloneProgrammer");
var MiscValidatePruneProgrammer_1 = require("typia/lib/programmers/misc/MiscValidatePruneProgrammer");
var TypedBodyProgrammer;
(function (TypedBodyProgrammer) {
    TypedBodyProgrammer.generate = function (project) {
        return function (modulo) {
            return function (type) {
                // VALIDATE TYPE
                JsonMetadataFactory_1.JsonMetadataFactory.analyze("@nestia.core.TypedBody")(project.checker)(type);
                // GENERATE VALIDATION PLAN
                var check = function (key) {
                    return function (equals) {
                        return function (programmer) {
                            return typescript_1.default.factory.createObjectLiteralExpression([
                                typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("type"), typescript_1.default.factory.createStringLiteral(key)),
                                typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier(key), programmer(__assign(__assign({}, project), { options: {
                                        numeric: false,
                                        finite: false,
                                        functional: false,
                                    } }))(modulo)(equals)(type)),
                            ]);
                        };
                    };
                };
                var misc = function (key) {
                    return function (programmer) {
                        return typescript_1.default.factory.createObjectLiteralExpression([
                            typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("type"), typescript_1.default.factory.createStringLiteral(key)),
                            typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier(key), programmer(__assign(__assign({}, project), { options: {
                                    numeric: false,
                                    finite: false,
                                    functional: false,
                                } }))(modulo)(type)),
                        ]);
                    };
                };
                //----
                // RETURNS
                //----
                var category = project.options.validate;
                // NORMAL
                if (category === "is")
                    return check("is")(false)(IsProgrammer_1.IsProgrammer.write);
                else if (category === "validate")
                    return check("validate")(false)(ValidateProgrammer_1.ValidateProgrammer.write);
                // STRICT
                else if (category === "validateEquals")
                    return check("validate")(true)(ValidateProgrammer_1.ValidateProgrammer.write);
                else if (category === "equals")
                    return check("is")(true)(IsProgrammer_1.IsProgrammer.write);
                else if (category === "assertEquals")
                    return check("assert")(true)(AssertProgrammer_1.AssertProgrammer.write);
                // CLONE
                else if (category === "assertClone")
                    return misc("assert")(MiscAssertCloneProgrammer_1.MiscAssertCloneProgrammer.write);
                else if (category === "validateClone")
                    return misc("validate")(MiscValidateCloneProgrammer_1.MiscValidateCloneProgrammer.write);
                // PRUNE
                else if (category === "assertPrune")
                    return misc("assert")(MiscAssertPruneProgrammer_1.MiscAssertPruneProgrammer.write);
                else if (category === "validatePrune")
                    return misc("validate")(MiscValidatePruneProgrammer_1.MiscValidatePruneProgrammer.write);
                // DEFAULT
                return check("assert")(false)(AssertProgrammer_1.AssertProgrammer.write);
            };
        };
    };
})(TypedBodyProgrammer || (exports.TypedBodyProgrammer = TypedBodyProgrammer = {}));
//# sourceMappingURL=TypedBodyProgrammer.js.map